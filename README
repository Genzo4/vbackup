VBackup - A modular backup utility
==================================

vbackup is an extensible CLI backup tool. Ultimately it is a collection of
scripts that perform backup of systems. It is based on bash and should support
most of the unices out there (if not then please report it as a bug).

Vbackup can backup:

    * Postgresql databases
    * MySQL databases
    * Filesystems using GNU tar
    * XFS filesystems using xfsdump
    * dpkg and RPM databases
    * MBR, Partition tables, MD and LVM information
    * OpenLDAP database

The backup procedure is completely customizable and extendable by the user.

Requirements:
=============

    * GNU find
    * GNU tar - for the tar method
    * xfsdump - for the xfsdump method
    * RPM - for the rpm method
    * dpkg - for the dpkg method
    * openldap - for the openldap method
    * openssl - for the x509 method
    * mdadm and lvm - for the mbr method

Installation:
=============

# ./configure --sysconfdir=/etc
# make
# make install

This will install vbackup to /usr/local and assume the configuration files will
be placed under /etc/vbackup

Usage:
======

For usage run:
# vbackup --help

For a list of backup methods (scripts) run:
# vbackup --list

To get some information about a module run:
# vbackup --help <module>

example:
# vbackup --help xfsdump

High level overview:
====================

vbackup runs by scanning a configuration directory for configuration files.
This directory has a vbackup.conf file and a series of config files that
dictate what vbackup should do. For example, one may indicate that a
PostgreSQL database should be backedup, the next one can indicate that
/home should be backed up and a final one would instruct vbackup to copy
the backups to a remote system using scp.

See "How It Works", below, for more details.

From a users point of view, vbackup simplifies the backup process by
requiring a config file for everything that otherwise would require a
custom made script.

Setup - the begginer's way:
===========================

There is a wizard script that will help you create basic configuration files.
Most probably you will want to use it for the first time. For more advanced
configuration and fine-tunning you will have to adjust the configuration files
yourself. Read the rest of this file to fully understand how you can use
vbackup.

To launch the wizard run:
# vbackup-wizard

and answer its questions. The wizard also serves as an introduction.

Note that this will only create basic backups, even though that may be
all that you need. For more advanced stuff you'll need to use the CLI
or the manual method

Setup - the CLI way:
====================

A simple backup:
----------------

Let's assume you want to:
    * Store backups undeer /mnt/backup/
    * Backup /home
    * Backup /etc
    * Backup your partition information in case disaster hits

Run the following and answer the questions properly. You change your config
later by editing config files by hand.

    # vbackup --rc --init
	# Enter "/mnt/backup/%L1%-%D%", without the quotes, for DESTDIR0
    # vbackup --rc --add 10-exist.exist	    # Just press enter when asked
    # vbackup --rc --add 20-mbr.mbr	    # Press enter on all questions
    # vbackup --rc --add 30-home.tar
	# Enter "/home /etc", without the quotes, for DIRS
	# Press enter for everything else

And you're done. This initialized the default strategy under /etc/vbackup/rc.d
and added 3 config files:
    * One to ensure that /mnt/backup is present
    * One to backup MBR and LVM data
    * One to backup /home and /etc using tar

You can verify that all is good by running:

    # vbackup --check

You can perform backups using:

    # vbackup 0
    - or, for less verbose output -
    # vbackup -d 4 0

You can perform higher level (incremental ) backups by passing a different
paramter to vbackup:

    # vbackup 5

this will base the backup on a previous level. Since the only lower level
backup is 0, it will be based on that. All methods that support incremental
backups will honor this. In this case this is tar. The mbr method will
still perform full backups, regardles of the level, as it doesn't support
incremental backups.


A more complated setup:
-----------------------

Let's assume you want to
    * Backup to an NFS mounted space that will be mounted on demand
      under /mnt/nfsbackup
    * Perform backup of /home using xfsdump
    * Perform backup of /boot and /etc using tar
    * Perform mysql and postgresql backup
    * Name this backup strategy "big"

Run the following
    # vbackup --rc --init big
	# Enter "/mnt/nfsbackup/%D1%-%L%", without the quotes, for DESTDIR0
    # vbackup --rc --add big 00-remote.nfsmount
	# Enter the NFS URI to mount (e.g. mynfs.local:/mnt/backup) in NFSDIR
	# Enter the mount point (/mnt/nfsbackup) in MOUNTPOINT
    # vbackup --rc --add big 10-full.mysql
	# Answer as needed. For Debian systems you can just press enter
	# on all options
    # vbackup --rc --add big 10-full.pgsql
	# Same as above
    # vbackup --rc --add big 20-home.xfsdump
	# Enter /home for PARTITIONS
    # vbackup --rc --add big 30-system.tar
	# Enter "/etc /boot" for DIRS
    # vbackup --rc --add 99-remote.umount
	# Enter /mnt/nfsbackup for MOUNTPOINT

Now, see what you have created and check the configuration:

    # vbackup --rc --list big
    # vbackup --check big

Level 0 vackups are performed with:

    # vbackup big 0

Level 5 backups are performed with:

    # vbackup big 5
    
Setup - by hand:
================
Let's assume the complex scenario above

1.  Go to /etc/vbackup and create a folder named rc.big.d. This will hold all
    the configuration scripts.

2.  Copy from the samples directory ($prefix/share/vbackup/samples) the
    following scripts to /etc/vbackup/rc.big.d:
    * sample.nfsmount
    * sample.umount
    * sample.xfsdump
    * sample.mysql
    * sample.pgsql
    * sample.umount
    * vbackup.conf.sample

3.  Rename sample.nfsmount to 00-remote.nfsmount (any name with the extension
    .nfsmount will do) and edit it. Change the values of the variables to fit
    your needs.

4.  Rename sample.umount to 99-remote.umount and edit it. Just set
    the mountpoint to umount.

5.  Rename sample.mysql to 10-full.mysql and edit it. Read the note at
    the top of the script and set variables as needed.

6.  Rename sample.pgsql to 10-full.pgsql and edit it.

7.  Rename sample.xfsdump to 20-home.xfsdump and edit it.

8.  Rename sample.tar to 30-system.tar an edit it.

9.  Rename vbackup.conf.sample to vbackup.conf and edit it

10. Check the configuration using:
    # vbackup --check big 0
    # vbackup --check big 5

To perform level 0 backup run
# vbackup big 0

To perform level 5 backup run
# vbackup big 5

How it works:
=============

When you run:
# vbackup 0

* The script enters directory /etc/vbackup/rc.d and searches for files named
  XX-name.module, where <XX> is a number and <module> is a backup
  module/method.
* All configurations are examined in an alphabetical order, so that the <XX>
  is used to indicate the order. These files apply to all backup levels.
* The script also checks for files named XX-name-level.module, where <level>
  is a certain level. These files apply only to that level and are ignored
  in other levels.
* For each configuration file, the coresponding module (<module>) is
  executed using the parameters of the configuration file. A module may be
  used from zero to many times. E.g. there can be many .tar files in there

The verbosity of the backup procedure may be controlled using the -d parameter.
Level 4 should let you know of any special cases while keeping everything
else for itself

Backups that fail will not stop the backup procedure. There are however some
errors that will stop everything (ex: when failing to mount a filesystem).
However, backups that fail will cause vbackup to exit with non 0 code.

Available modules:
==================

The following modules are available:

dpkg:	    Backup debian package lists
exec:	    Execute some shell commands
exist:	    Check whether a file/dir exists
ftar:	    Filesystem backup using tar and find
mbr:	    Backup MBRs, Partition Tables, MD and LVM information
mount:	    Mount a partition
mysql:	    Dump mysql databases
nfsmount:   Mount an NFS share
off:	    Don't do anything
openldap:   Backup OpenLDAP database
pgsql:	    Dump pgsql databases
rm:	    Remove a directory recursively
rpm:	    Backup RPM database
scp:	    Remote file copy using scp
tar:	    Perform filesystem backup using GNU tar
umount:	    Umount a partition
x509:	    Encrypt a file or a directory using x509 certificates
xfsdump:    Perform filesystem backup using xfsdump

More:
=====

More information about how vbackup actually works can be found in README.dev

Copyright:
==========

    Copyright (c) 2006-2016 Harhalakis Stefanos

License:
========

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

Contact:
========

    For bug reports, recommendations or anything else, you can find me at
    v13@v13.gr. I'll be glad to hear from you.

    The latest vbackup can be found at:
    https://github.com/sharhalakis/vbackup

Extending:
==========

    If you're interested in extending vbackup, just read the README.dev and
    have a look at the existing modules (I recommend mount and tar/xfsdump).
    A template for new modules is available with the name 'skel' under the
    scripts/ directory of the source code.

    If you believe you've created something that will be useful for others
    too, I'll be glad to include it in the distribution (preserving your
    copyright of course)

vim: set ts=8 sts=4 sw=4 noet formatoptions=rtcn textwidth=79:

