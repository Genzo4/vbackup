#!/bin/sh
#
# This file is part of sbackup.
#
# sbackup is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# sbackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with sbackup; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
#
# $Id$
#
# Description
#
#	Backup a PostgreSQL  database
#
# TODO:
#	Backup BLOBs too. (configuration option?)
#	Full DB backup (one dump) (?)
#

NAME="pgsql"
VERSION="1.0.0"
DESC="Backup PostgreSQL databases"
LICENSE="GPLv2"
COPYRIGHT="Copyright (c) 2006-2007 Stefanos Harhalakis"
CONTACT="v13@v13.gr"

# Display help
do_help()
{
	cat << _END
Configuration options:
	DATABASES	A space separated list of databases to backup.
			Set this to '-' to backup all databases. (required)
	PGUSER		The username to use to connect
	PASSWORD	The password to use to connect
	PSQL		The path to psql executable
	PGDUMP		The path to pg_dump executable
	SUUSER		Do an 'su' to this user (example: postgres)
	DESTDIR		The destination directory (required)
	CREATEDB	Include CREATE DATABASE statements (y/N)
	GLOBALS		Where to dump global objects (Default: "globals")
	ALL		Dump template[1-9] too (Y/n)
_END
}

# Check configuration
# return: 0: ok, 1: error
do_check_conf()
{
	[ -z "$DATABASES" ] && h_error "Missing DATABASES" && return 1
#	[ -z "$USER" ] && echo "Missing USER" && return 1
	[ -z "$DESTDIR" ] && h_error "Missing DESTDIR" && return 1

	return 0
}

# Do backup
do_run()
{
	if [ "x$ABORT" = "x1" ] ; then
		return 0
	fi

	# Initialize
	if [ -z "$PSQL" ] ; then
		PSQL="psql";
	fi

	if [ -z "$PGDUMP" ] ; then
		PGDUMP="pg_dump"
	fi

	for t in $PSQL $PGDUMP ; do
		if ! which $t > /dev/null ; then
			h_error "Could not find '$t'"
			return 1
		fi
	done

	if ! [ -z "$PGUSER" ] ; then
		P_USER="-U $PGUSER"
	fi

	if ! [ -z "$PASSWORD" ] ; then
		export PGPASSWORD="$PASSWORD"
	fi

	# Extra parameters for dumping
	P_DUMPPARAMS=""
	if h_is_true "$CREATEDB" "1" ; then
		P_DUMPPARAMS="$P_PARAMS -C"
	fi

	if h_is_true "$ALL" "yes" ; then
		P_FILT1="| grep -v 'template0'"
	else
		P_FILT1="| grep -v 'template[0-9]'"
	fi

	if [ "$DATABASES" = "-" ] ; then
		CMD="$PSQL -F , -A $P_USER -P tuples_only -P pager=off -l | \
			cut -f 1 -d, $P_FILT1"
		if [ -z "$SUUSER" ] ; then
			DATABASES=`$CMD`
		else
			DATABASES=`su - $SUUSER -c "$CMD"`
		fi
	fi

	FIRST=1
	for db in $DATABASES ; do
		h_msg 6 "Dumping: $db to $DESTDIR/$db.gz"
		CMD="$PGDUMP $P_USER $P_DUMPPARAMS $db"
		if [ -z "$SUUSER" ] ; then
			$CMD | gzip > $DESTDIR/$db.gz
		else
			su - $SUUSER -c "$CMD" | gzip > $DESTDIR/$db.gz
		fi
	done
}

