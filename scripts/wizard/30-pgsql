#!/bin/bash
#
# This file is part of vbackup.
#
# vbackup is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# vbackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with vbackup  If not, see <http://www.gnu.org/licenses/>.
#
# $Id$
#

NAME="pgsql"

PRI="30"

# The w_do_ask function. Adjust as needed
# $1: The question to ask. First question is always "ENABLE". ASK_NEXT sets
#     the next question
#
# Set ASK_NEXT to the next question or "" for finish
# When ASK_NEXT=="", also return 0/1 to indicate that the script is enabled
# (0: enabled, 1: disabled)
w_do_ask()
{
    local R DEF

    R=1
    case "$1" in
	ENABLE)
	    if ( ! fuser 5432/tcp ) && ( ! test -d /etc/postgresql ) ; then
		DEF='n'
	    else
		DEF='y'
	    fi

	    if h_ask_yesno \
"You can backup your PostgreSQL cluster (if you have one). This will perform
a backup of all databases but only for the 'main' cluster. If you have
multiple clusters you'll have to add more than one configuration files, one
for each cluster. You'll have to do this by hand." \
		"Perform PostgreSQL backup?" \
		$DEF ; then
		ASK_NEXT="pguser"
	    else
		R=1
		ASK_NEXT=""
	    fi
	;;

	pguser)
	    h_ask_str \
"You need to use a postgresql administrative user to perform database backup.
This is either an administrative user you've created or a default one.

This user should be a database user and not a system user.

For most systems you can use the 'postgres' user by default and just press
enter here. Debian users just press enter.
" \
		"Enter the username of a postgresql administrative user" \
		"postgres"

	    echo "PGUSER=\"$RET\"" >> $CFG
	    ASK_NEXT="suuser"
	;;

	suuser)
	    h_ask_str \
"You can either use a database password or an existing system user that can
connect to PostgreSQL as the administrative user without requiring a password.
The latter is recommended. Supplying a password is insecure on multiuser
systems. Either provide a username to 'su' to, or a password to use to connect.
Enter - if you want to use a password instead.

You can setup this kind of access:
a) by modifying pg_hba.conf
b) by adding a .pgpass file in a user's home directory. A sample line for the
.pgpass file is: *:*:*:username:password

For debian systems you can rely on the 'postgres' user by default and just
press enter here." \
	    "What username to su to?" \
	    "postgres"

	    if [ "x$RET" = "x-" ] ; then
		ASK_NEXT="password"
	    else
		echo "SUUSER='$RET'" >> $CFG
		ASK_NEXT=""
		R=0
	    fi
	;;

	password)
	    h_ask_str "" "Enter the database administrator password" ""
	    echo "PASSWORD='$RET'" >> $CFG
	    ASK_NEXT=""
	    R=0
	;;
    esac

    return $R
}

# The w_get_config function.
# $1: Backup level
#
# Display configuration file in stdout
w_get_config()
{
    cat $CFG
    cat << _KOKO
DATABASES="-"
DESTDIR="pgsql/"
_KOKO
}

# vim: set ts=8 sts=4 sw=4 noet formatoptions=r ai nocindent:

